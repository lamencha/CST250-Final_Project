# ********** DO NOT MODIFY THIS ASM FILE **********

# a3 - counter location
# s0 - timer address
timer_stop:
	lw $t0, 0($s0)	#timer
	lw $t1, 0($a3)	#counter
	addu $t2, $t1, $t0
	sw $t2, 0($a3)	#update counter
	jr $ra
	nop
	

# Reads array from UART
get_array:
	push $ra
	li $s0, 0xF0000000	# UART
	li $s2, 0b10	# Status register bit mask
	li $t5, 10		# Used to convert decimal to binary
	li $t6, 48		# Used to convert ASCII to decimal
	li $t7, 59		# ';'
	li $t8, 32		# space character
	li $t0, 0		# value of current number
	li $t1, array1
	li $t2, array2
	li $t3, array3
	li $v1, 0		# Array size return value
	li $s3, 0		# Acculmultor
	UART_read_loop:
		jal get_char
		nop
		# Check for end of input
		bne $v0, $t7, UART_not_a_semicolon
			nop
			jal store_num_in_arrays
			addiu $v1, $v1, 1	#increment array length during branch delay slot
			move $v0, $s3	#move accumulator to return value
			pop $ra
			return
		UART_not_a_semicolon:
		# Check for space indicating end of number
		bne $v0, $t8, UART_not_a_space
			nop
			jal store_num_in_arrays
			addiu $v1, $v1, 1	#increment array length during branch delay slot
			move $t0, $0	#clear input
			j UART_read_loop
			nop
		# Assume value is a number, convert to binary
		UART_not_a_space:
			mullo $t0, $t0, $t5	#multiply current number by 10
			subu $v0, $v0, $t6	#convert UART character from ascii to decimal
			addu $t0, $t0, $v0
			j UART_read_loop
			nop

# Makes a duplicate of the read array in all 4 allocated arrays
store_num_in_arrays:
	sw $t0, 0($t1)
	sw $t0, 0($t2)
	sw $t0, 0($t3)
	addiu $t1, $t1, 4
	addiu $t2, $t2, 4
	addiu $t3, $t3, 4
	addu $s3, $s3, $t0	# Update accumulator
	jr $ra
	nop


# Calls array validator on all 4 arrays
# Inputs for single_array_sort_validator:
# 	a0 - array starting address
# 	a1 - array length
#	a2 - accumulator
#	a3 - sort being validated
sort_validator:
	push $ra
	li $a3, 0	# sort index
	li $a0, array1
	jal single_array_sort_validator
	nop
	call print_validator_output
	nop

	li $a3, 4	#  sort index
	li $a0, array2
	jal single_array_sort_validator
	nop
	call print_validator_output

	li $a3, 8	#  sort index
	li $a0, array3
	jal single_array_sort_validator
	nop
	call print_validator_output

	li $a3, 10 # New Line
	jal put_char
	nop

	pop $ra
	return
	nop

# Validates a single array
# Inputs:
# 	a0 - array starting address
# 	a1 - array length
#	a2 - accumulator
#	a3 - sort being validated
# Outputs:
# 	v0 - 1 = pass, 0 = fail
single_array_sort_validator:
	li $t0, 0	# loop counter
	li $t1, 0	# accumulator
#	li $t2, 1
#	subu $t2, $a1, $t2	#subtract 1 from array size
	li $s0, 0	# previous number
	#li $v0, 0 # return value initialized as fail
	validator_loop:
		lw $s1, 0($a0)
		addu $t1, $t1, $s1	# update accumulator
		slt $t3, $s1, $s0	# compare current and previous number
		bne $t3, $0, exit_validator_loop_fail	# previous < current, exit with fail condition
		addiu $t0, $t0, 1	# increment loop counter during branch delay slot
		move $s0, $s1	# update previous number
		bne $t0, $a1, validator_loop	# check if end of the array reached
		#bne $t0, $t2, validator_loop	# check if end of the array reached
		addiu $a0, $a0, 4	# increment array address during branch delay slot
	beq $a2, $t1, exit_validator_loop_pass	# exit with success if accumulators  match
	nop
	exit_validator_loop_fail:
	#increment fail counter if failed
	li $v0, fails_sum
	addu $v0, $v0, $a3
	lw $t0, 0($v0)
	addiu $t0, $t0, 1
	sw $t0, 0($v0)
	exit_validator_loop_pass:
	jr $ra
	nop
			


#Description: Reads UART and returns it in $v0
# Uses s2, s4, v0 
get_char:
	get_char_busy_wait:
		lw $s4, 4($s0)	#load status register
		and $s4, $s4, $s2	#mask for ready bit
		bne $s4, $s2, get_char_busy_wait
		nop
	lw $v0, 8($s0)	#load from recieve buffer
	sw $s2, 0($s0)	#command register: clear status
	jr $ra
	nop